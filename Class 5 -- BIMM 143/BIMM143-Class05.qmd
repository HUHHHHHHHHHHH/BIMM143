---
title: "BIMM 143, Class 5: Data Visualization"
author: "Charlie (A15837296)"
format: html
---

# Base R graphics vs ggplot2

There are many graphics systems in R, including so-called "base" R graphics and the very popular **ggplot2** package.

To compare these lets play with the inbuilt `cars` dataset

```{r}
head(cars)
```

To use "base" R I can simply call the `plot()` function:
```{r}
plot(cars)
```

To use `ggplot2` package, we first need to install it with the function `install.packages("ggplot2")`.

I will rin this in my R console (i. e. the R brain) as I do not want to re-install it every time I render my report...

The main function in this package is called `ggplot()` , Can I just call it?

```{r}
library(ggplot2)
ggplot()
```

To make a figure with ggplot I need always at least three things: 

- **data** (what I want to plot)
- **aesthetics** (mapping of the data to the plot I want)
- **the geoms** (i.e. how I want to plot the data)

```{r}
ggplot(data=cars) + 
  aes(x=speed, y=dist) +
geom_point() 
```

If I want to add more stuff, I can just keep adding layers, e.g.

```{r}
ggplot(data=cars) + 
  aes(x=speed, y=dist) +
geom_point() +
  geom_smooth()
```

GGplot is much more verbose than base R plots, but it has a consistent layer system that I can use to make just about any plot.

Lets make a plot with a striaght line fit - i.e. a linear model and no standard error shown 

```{r}
ggplot(data=cars) + 
  aes(x=speed, y=dist) +
geom_point() +
  geom_smooth(se=FALSE, method="lm") + 
  labs(title = "Stopping Distance for Old Cars", 
       subtitle = "From the Inbuilt Cars Database",
       caption = "BIMM 143", 
       x= "Speed (MPH)", y= "Stopping Distance (ft)")
```

## A more complicated plot 

Lets lot some gene expression data
The code below reads the results of an artificial expression analysis where a new anti-viral drug is being tested

```{r}
url <- "https://bioboot.github.io/bimm143_S20/class-material/up_down_expression.txt"
genes <- read.delim(url)
head(genes)
```

>Q. How many genes are in this dataset? 

```{r}
nrow(genes)
```

> Q. How can we summarize that last column - the "State" column? 

```{r}
table(genes$State)
```

```{r}
p <- ggplot(genes) + 
  aes(x=Condition1, y=Condition2, color=State) +
  geom_point() + 
  labs(x="Control", y="Drug Treated")

```

I can now just call "p" when I want to see this plot or add to it. 

```{r}
p + labs(title="Gene Expression Changes Upon Drug Treatment") + scale_color_manual(values=c("blue", "gray", "red"))
```



## Going Further

Here I read a slightly larger dataset

```{r}
# File location online
url <- "https://raw.githubusercontent.com/jennybc/gapminder/master/inst/extdata/gapminder.tsv"

gapminder <- read.delim(url)
head(gapminder)
```

```{r}
ggplot(gapminder) + 
  aes(x=gdpPercap, y=lifeExp, color=continent, size=pop) +
  geom_point(alpha=0.3)+
  labs(x="GDP Per Capita", y="Life Expectancy")
```

A very useful layer to add sometimes is for "facetting". 

```{r}
ggplot(gapminder) + 
  aes(x=gdpPercap, y=lifeExp, color=continent, size=pop) +
  geom_point(alpha=0.3)+
  labs(x="GDP Per Capita", y="Life Expectancy")+
  facet_wrap(~continent)
```

Charlie Rezanka, A15837296



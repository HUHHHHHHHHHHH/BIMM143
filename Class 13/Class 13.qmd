---
title: "Class 13"
author: "Charlie Rezanka (A15837296)"
format: html
---

## Importing Data

We need tow things for this project:

- Countdata (counts every transcript and gene in the experiment)
- Col data (metadata that describes the experimental setup)


```{r}
countdata <- read.csv("airway_scaledcounts.csv", row.names = 1)
head(countdata)
```

```{r}
metadata <- read.csv("airway_metadata.csv", row.names=1)
head(metadata)
```


> Q1. How many genes are in this dataset?

```{r}
nrow(countdata)
```




> Q2. How many ‘control’ cell lines do we have? 

```{r}
table(metadata$dex)
```

4 control cell lines


another way:
```{r}
sum(metadata$dex == "control")
```


- Step 1.
Calculate the mean of the control samples (i.e. columns in countdata)

(a) We need to find which columns are "control" samples.
 - look in the metadata at the $dex column
 
```{r}
control.inds <- metadata$dex == "control"
```

(b) Extract all control columns from `countdata` and call it `control.counts`

```{r}
control.counts <- (countdata[,control.inds])
```

(c) Calculate the mean value accross the rows of `control.counts` i.e. calculate the mean count values for each gene in the control samples. 

```{r}
control.means <- rowMeans(control.counts)
head(control.means)
```

- Step 2. Calculate the mean of the treated samples


```{r}
treated.inds <- metadata$dex == "treated"
treated.counts <- (countdata[,treated.inds])
treated.means <- rowMeans(treated.counts)
head(treated.means)
```

```{r}
meancounts <- data.frame(control.means, treated.means)
head(meancounts)
```


```{r}
plot(meancounts)
```


```{r}
plot(meancounts, log="xy")
```


We use log transformations for skewed data such as this and because we really care most about relative changes in magnitude. 

We most often use Log2 to transform as the math is easier to interpret than log10 or ln. 

If we have no change - i.e. some values in control and treated we will have a log2 value of 0.
```{r}
log2(20/20)
```
If I have double the amount of (20 compared to 10) I will have a log2 fold-change of +1
```{r}
log2(20/10)
```

If I have half the amount I will have a log2 fold-change of -1
```{r}
log2(10/20)
```


```{r}
log2(40/10)
```

```{r}
meancounts$log2fc <- log2(meancounts$treated.means/meancounts$control.means)
head(meancounts)
```

A common rule of thumb is if the log-fold change is +2 or greater we consider that gene "up-regulated" and a change of at least -2 is considered "down-regulated".


> Q. How many genes are up-regulated at the common threshold of +2 log2fc values?

```{r}
sum(meancounts$log2fc >= 2 , na.rm = TRUE)
```


Wait a damn minute! Yes these are big changes, but are they significant?? 

To do this properly, we will turn to the DESeq2 package.

## DESeq2 Analysis

```{r}
#| message: false
library(DESeq2)
```


To use DESeq, we need our input countdata and metadata in a specific format that DESeq wants: 

```{r}
dds <- DESeqDataSetFromMatrix(countData = countdata, 
                       colData = metadata,
                       design = ~dex)
```

To run the analysis, I can now use the main DESeq2 function called `DESeq()` with `dds` as input 

```{r}
dds <- DESeq(dds)
```


To get the results out of this `dds` object, we can use the `results()` function from the package.

```{r}
res <- results(dds)
head(res)
```

Lets make a final (for today) plot out of the log2fold change vs the adjusted P-value. 

```{r}
plot(res$log2FoldChange, res$padj)
```

It is the low P-values that we care about and these are lost in the skered plot above. Let's take the log of the $padj values for out plot.

```{r}
plot(res$log2FoldChange, -log(res$padj))
abline(v=c(+2,-2), col="gray")
abline(h=log(.05), col="blue")
```


Finally, we can make a color vector to use i the plot to better highlight the genes we care about. 

```{r}
mycols <- rep("gray", nrow(res))
mycols[res$log2FoldChange >= 2] <- "red"
mycols[res$log2FoldChange <= -2] <- "red"
mycols[res$padj > -log(.05)] <- "red"

plot(res$log2FoldChange, -log(res$padj), col=mycols)
abline(v=c(+2,-2), col="gray")
abline(h=-log(.05), col="blue")
```


Still to do:
- add annotations (gene name, genome, etc)
- save results to a CSV file 
- do some pathway analysis


```{r}
head(res)
```

## Adding Annotation Data

We can use AnnotationDbi to package and add annotation data such as gene identifiers from different sources. 
```{r}
BiocManager::install("AnnotationDbi")
BiocManager::install("org.Hs.eg.db")
```


We can translate (a.k.a "map") between all these database ID formats:
```{r}
library("AnnotationDbi")
library("org.Hs.eg.db")

columns(org.Hs.eg.db)
```


```{r}
res$symbol <- mapIds(org.Hs.eg.db,
                     keys=row.names(res), #genenames
                     keytype="ENSEMBL",   #current genename format
                     column="SYMBOL",     #new genename format
                     multiVals="first")
```

```{r}
head(res)
```


```{r}
res$entrez <- mapIds(org.Hs.eg.db,
                     keys=row.names(res), 
                     keytype="ENSEMBL",   
                     column="ENTREZID",     
                     multiVals="first")

res$genename <- mapIds(org.Hs.eg.db,
                     keys=row.names(res), 
                     keytype="ENSEMBL",   
                     column="GENENAME",     
                     multiVals="first")

head(res)
```


## Save our results as a CSV file


```{r}
write.csv(res, file="myresultsc12.csv")
```


## Pathway Analysis

We can use the KEGG database of biological pathways to get some more insight into our differentially expressed genes and the kinds of biology they are involved in.


```{r}
#l message: false
library(pathview)
library(gage)
library(gageData)


```


```{r}
data(kegg.sets.hs)

# Examine the first 2 pathways in this kegg set for humans
head(kegg.sets.hs, 2)
```


```{r}
head(res$entrez)
```


Make a new vector of fold-change values that I will use as input ofr `gage()` this will have the ENTREZ IFs as names

```{r}
foldchanges = res$log2FoldChange
names(foldchanges) = res$entrez
```


```{r}
head(foldchanges)
```

```{r}
keggres = gage(foldchanges, gsets=kegg.sets.hs)
attributes(keggres)
```


```{r}
# Look at the first three downregulated (less) pathways
head(keggres$less, 3)
```


Now I can use the **KEGG IDs** of these pathways from gage to view our genes mapped to these pathways. 
```{r}
pathview(gene.data=foldchanges, pathway.id="hsa05310")
```

![Fig. 1. A schematic overview of the asthma pathway including associated genes and their expression levels. Green coloration dennotes up-regulation during an asthma attack, red dennotes downregulation.](hsa05310.pathview.png)








